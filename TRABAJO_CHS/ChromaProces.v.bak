module effects(	input wire 			iRESET,
				input wire			iCLK27,
				input wire			iCLK50,
				input wire [9:0]	imVGA_R,
				input wire [9:0]	imVGA_G,
				input wire [9:0]	imVGA_B,
				input wire			iKEY,
				input wire			iSetL,
				input wire [10:0] 	iX,
				input wire [10:0] 	iY,
				input wire [9:0] 	iRed,
				input wire [9:0] 	iGreen,
				input wire [9:0] 	iBlue,
				input wire [17:0] 	iSW,
				input wire			next_key,
				input wire [8:0]	char,
				output wire [7:0]	oLEDG,
				output wire [17:0]	oLEDR,
				output wire [9:0] 	oRed,
				output wire [9:0] 	oGreen,
				output wire [9:0] 	oBlue	);

reg [24:0]	counter;
reg fade_in, start;

//assign oLEDR = counter[24:7];
assign oLEDG[0] = iRESET;
assign oLEDG[1] = iKEY;
assign oLEDG[2] = fade_in;
assign oLEDG[3]= start;

//writing to screen
wire letter;
//color of letters
wire [9:0] letterColor;
assign letterColor = 10'h3FF;

screenWriter	u0	(	.iRESET(iRESET),
						.iSetL(iSetL),
						.iCLK50(iCLK50),
						.iX(iX[9:1]),
						.iY(iY[8:1]),
						.iSW(iSW[17:0]),
						.next_key(next_key),
						.char(char),
						.oLEDR(oLEDR),
						.letter(letter)	);
						
						

always @ (posedge iCLK27)

begin
	// fade in or out
	if (iRESET)
	begin
		fade_in <= 0;
		start <= 1;
		counter <= 0;
	end
	else if (iKEY)
	begin
		if (start)
		begin
			if (~fade_in) counter <= 0;
			else counter <= 25'h1FFFFFF;
			fade_in <= ~fade_in;
			start <= 0;
		end
	end
	else if (fade_in & (counter < 25'h1FFFFFF)) counter <= counter + 1;
	else if (~fade_in & (counter > 0)) counter <= counter - 1;
	else start <= 1;
end

wire isGreen;
wire [9:0] threshold;
// best setting is iSW[6] = 1;

//runs off of set green screen value (set value +/- iSW)
/*assign isGreen =	(iGreen > (gsGreen-iSW)) &// (iGreen < (gsGreen+iSW)) &
					(iRed < (gsRed+iSW)) & //(iRed > (gsRed-iSW)) &
					(iBlue < (gsBlue+iSW));// & (iBlue > (gsBlue-iSW));
*/

//runs off of switches
//assign isGreen = (iGreen > iSW) & (iRed < iSW) & (iBlue < iSW);

//runs off of hardcoded threshold (10'h20)
//assign threshold = 10'h20;
assign threshold = 10'h1FF;
assign isGreen = (iGreen > threshold) & (iRed < threshold) & (iBlue < threshold);
//assign isGreen = (iGreen > (threshold>>1)) & (iRed < (threshold<<1)) & (iBlue < (threshold<<1));

// for checking green in image
//wire imIsGreen = (imVGA_G > (threshold>>1)) & (imVGA_R < (threshold<<1)) & (imVGA_B < (threshold<<1));
wire imIsGreen = (imVGA_G == 10'h3FF) & (imVGA_R == 10'h1) & (imVGA_B == 10'h0);

//image to display in green screen areas
wire [9:0] imRed, imGreen, imBlue;
//assign imRed = 10'h3FF;
//assign imGreen = 10'h3FF;
//assign imBlue = 10'h3FF;
assign imRed = imVGA_R;
assign imGreen = imVGA_G;
assign imBlue = imVGA_B;

//green screen effect
wire [9:0] gsRed, gsGreen, gsBlue;
assign gsRed = (isGreen ? imRed : iRed);
assign gsGreen = (isGreen ? imGreen : iGreen);
assign gsBlue = (isGreen ? imBlue : iBlue);

//reverse green screen
wire [9:0] rgsRed = imIsGreen ? iRed : imRed;
wire [9:0] rgsGreen = imIsGreen ? iGreen : imGreen;
wire [9:0] rgsBlue = imIsGreen ? iBlue : imBlue;

//pick between green screen and reverse
wire [9:0] pgsRed = iSW[16] ? gsRed : rgsRed;
wire [9:0] pgsGreen = iSW[16] ? gsGreen: rgsGreen;
wire [9:0] pgsBlue = iSW[16] ? gsBlue: rgsBlue;

//add writing to screen
wire [9:0] wRed, wGreen, wBlue;
assign wRed = (letter ? letterColor : pgsRed);
assign wGreen = (letter ? letterColor : pgsGreen);
assign wBlue = (letter ? letterColor : pgsBlue);

//add fade effect
wire [9:0] eRed, eGreen, eBlue;
assign eRed = (counter[24:15] & wRed) + (~counter[24:15] & iRed);
assign eGreen = (counter[24:15] & wGreen) + (~counter[24:15] & iGreen);
assign eBlue = (counter[24:15] & wBlue) + (~counter[24:15] & iBlue);

/*
wire [9:0] eRed, eGreen, eBlue;
assign eRed = (counter[24:15] & (letter ? letterColor : (isGreen ? imRed : iRed))) + (~counter[24:15] & iRed);
assign eGreen = (counter[24:15] & (letter ? letterColor : (isGreen ? imGreen : iGreen))) + (~counter[24:15] & iGreen);
assign eBlue = (counter[24:15] & (letter ? letterColor : (isGreen ? imBlue : iBlue))) + (~counter[24:15] & iBlue);
*/

/*
wire [9:0] lRed, lGreen, lBlue;
assign lRed = (counter[24:15] & letterColor) + (~counter[24:15] & iRed);
assign lGreen = (counter[24:15] & letterColor) + (~counter[24:15] & iGreen);
assign lBlue = (counter[24:15] & letterColor) + (~counter[24:15] & iBlue);
*/
wire effectsOn;
assign effectsOn = iSW[0];

assign oRed = effectsOn ? eRed : iRed;
assign oGreen = effectsOn ? eGreen : iGreen;
assign oBlue = effectsOn ? eBlue : iBlue;

/*
assign oRed = iSW[0] ? (letter ? lRed : (isGreen ? eRed : iRed)) : iRed;
assign oGreen = iSW[0] ? (letter ? lGreen : (isGreen ? eGreen : iGreen)) : iGreen;
assign oBlue = iSW[0] ? (letter ? lBlue : (isGreen ? eBlue : iBlue)) : iBlue;
*/

endmodule